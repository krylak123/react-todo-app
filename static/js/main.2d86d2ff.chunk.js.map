{"version":3,"sources":["context/reducers.js","context/GlobalStore.js","utils/formValidation.js","components/FormPanel.js","images/icon-sun.svg","images/icon-moon.svg","components/Header.js","images/icon-check.svg","images/icon-cross.svg","components/Task.js","components/ResultsList.js","components/ResultsOptions.js","components/ResultsPanel.js","components/App.js","reportWebVitals.js","index.js"],"names":["appActions","appReducer","state","action","type","payload","newState","task","localStorage","setItem","JSON","stringify","handleAddTask","filter","item","id","handleRemoveTask","forEach","isFinished","handleFinishTask","handleClearFinishTask","result","destination","splice","source","index","reorderedItem","handleReordersState","AppContext","createContext","GlobalStore","children","useReducer","parse","getItem","getDataFromStorage","dispatch","Provider","value","addTask","removeTask","finishTask","clearFinishTask","reorderState","validationSchema","Yup","shape","taskName","required","trim","min","FormPanel","useContext","formik","useFormik","initialValues","onSubmit","values","generateID","Date","getTime","nowDate","toLocaleString","name","dateAdd","className","handleSubmit","placeholder","onChange","handleChange","onBlur","handleBlur","Header","useState","isDarkMode","setIsDarkMode","onClick","document","documentElement","setAttribute","prevValue","src","sunIcon","moonIcon","alt","Task","draggableId","provided","ref","innerRef","draggableProps","dragHandleProps","handleOnClickFinish","finishIcon","handleOnClickDelete","deleteIcon","ResultsList","currentFilter","count","taskList","taskListMap","map","useEffect","length","onDragEnd","droppableId","droppableProps","ResultsOptions","onClickFilters","onClickClear","ResultsPanel","setFilter","setCount","e","querySelectorAll","btn","classList","remove","target","add","querySelector","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2d86d2ff.chunk.js","sourcesContent":["export const appActions = {\r\n    ADD_TASK: 'GET_TASKS',\r\n    REMOVE_TASK: 'REMOVE_TASK',\r\n    FINISH_TASK: 'FINISH_TASK',\r\n    CLEAR_FINISH_TASK: 'CLEAR_FINISH_TASK',\r\n    REORDER_STATE: 'REORDER_STATE',\r\n};\r\n\r\nconst handleAddTask = (state, payload) => {\r\n    const newState = [...state, payload.task];\r\n\r\n    localStorage.setItem('TASK_LIST', JSON.stringify(newState));\r\n\r\n    return newState;\r\n};\r\n\r\nconst handleRemoveTask = (state, payload) => {\r\n    const newState = state.filter((item) => item.id !== payload.id);\r\n\r\n    localStorage.setItem('TASK_LIST', JSON.stringify(newState));\r\n\r\n    return newState;\r\n};\r\n\r\nconst handleFinishTask = (state, payload) => {\r\n    const newState = [...state];\r\n    newState.forEach((item) => {\r\n        if (item.id === payload.id) {\r\n            item.isFinished = !payload.isFinished;\r\n        }\r\n    });\r\n\r\n    localStorage.setItem('TASK_LIST', JSON.stringify(newState));\r\n\r\n    return newState;\r\n};\r\n\r\nconst handleClearFinishTask = (state) => {\r\n    const newState = state.filter((item) => !item.isFinished);\r\n\r\n    localStorage.setItem('TASK_LIST', JSON.stringify(newState));\r\n\r\n    return newState;\r\n};\r\n\r\nconst handleReordersState = (state, payload) => {\r\n    if (!payload.result.destination) return state;\r\n    const newState = [...state];\r\n    const [reorderedItem] = newState.splice(payload.result.source.index, 1);\r\n    newState.splice(payload.result.destination.index, 0, reorderedItem);\r\n\r\n    localStorage.setItem('TASK_LIST', JSON.stringify(newState));\r\n\r\n    return newState;\r\n};\r\n\r\nexport const appReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case appActions.ADD_TASK:\r\n            return handleAddTask(state, action.payload);\r\n\r\n        case appActions.REMOVE_TASK:\r\n            return handleRemoveTask(state, action.payload);\r\n\r\n        case appActions.FINISH_TASK:\r\n            return handleFinishTask(state, action.payload);\r\n\r\n        case appActions.CLEAR_FINISH_TASK:\r\n            return handleClearFinishTask(state);\r\n\r\n        case appActions.REORDER_STATE:\r\n            return handleReordersState(state, action.payload);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import React, { createContext, useReducer } from 'react';\r\nimport { appActions, appReducer } from './reducers';\r\n\r\nexport const AppContext = createContext(null);\r\n\r\nconst GlobalStore = ({ children }) => {\r\n    const getDataFromStorage = () => {\r\n        const state = JSON.parse(localStorage.getItem('TASK_LIST'));\r\n\r\n        if (state) {\r\n            return state;\r\n        }\r\n\r\n        return [];\r\n    };\r\n\r\n    const [state, dispatch] = useReducer(appReducer, getDataFromStorage());\r\n\r\n    const addTask = (task) => {\r\n        dispatch({ type: appActions.ADD_TASK, payload: { task } });\r\n    };\r\n\r\n    const removeTask = (id) => {\r\n        dispatch({ type: appActions.REMOVE_TASK, payload: { id } });\r\n    };\r\n\r\n    const finishTask = (id, isFinished) => {\r\n        dispatch({ type: appActions.FINISH_TASK, payload: { id, isFinished } });\r\n    };\r\n\r\n    const clearFinishTask = () => {\r\n        dispatch({ type: appActions.CLEAR_FINISH_TASK });\r\n    };\r\n\r\n    const reorderState = (result) => {\r\n        dispatch({ type: appActions.REORDER_STATE, payload: { result } });\r\n    };\r\n\r\n    return (\r\n        <AppContext.Provider\r\n            value={{\r\n                state,\r\n                addTask,\r\n                removeTask,\r\n                finishTask,\r\n                clearFinishTask,\r\n                reorderState,\r\n            }}\r\n        >\r\n            {children}\r\n        </AppContext.Provider>\r\n    );\r\n};\r\n\r\nexport default GlobalStore;\r\n","import * as Yup from 'yup';\r\n\r\nconst validationSchema = () =>\r\n    Yup.object().shape({\r\n        taskName: Yup.string()\r\n            .required('task name is required')\r\n            .trim()\r\n            .min(3, 'task must have min 3 chars'),\r\n    });\r\n\r\nexport default validationSchema;\r\n","import React, { useContext } from 'react';\r\nimport { useFormik } from 'formik';\r\n\r\nimport validationSchema from '../utils/formValidation';\r\nimport { AppContext } from '../context/GlobalStore';\r\n\r\nconst FormPanel = () => {\r\n    const { addTask } = useContext(AppContext);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            taskName: '',\r\n        },\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            const generateID = new Date().getTime();\r\n            const nowDate = new Date().toLocaleString();\r\n\r\n            const task = {\r\n                id: generateID,\r\n                name: values.taskName,\r\n                isFinished: false,\r\n                dateAdd: nowDate,\r\n            };\r\n\r\n            formik.values.taskName = '';\r\n            addTask(task);\r\n        },\r\n    });\r\n\r\n    return (\r\n        <form className='form' onSubmit={formik.handleSubmit}>\r\n            <label className='form__label'>\r\n                <input\r\n                    type='text'\r\n                    name='taskName'\r\n                    className='form__input'\r\n                    placeholder='Create a new todo...'\r\n                    value={formik.values.taskName}\r\n                    onChange={formik.handleChange}\r\n                    onBlur={formik.handleBlur}\r\n                />\r\n            </label>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default FormPanel;\r\n","export default __webpack_public_path__ + \"static/media/icon-sun.910b1f9a.svg\";","export default __webpack_public_path__ + \"static/media/icon-moon.6c03114b.svg\";","import React, { useState } from 'react';\r\n\r\nimport sunIcon from '../images/icon-sun.svg';\r\nimport moonIcon from '../images/icon-moon.svg';\r\n\r\nconst Header = () => {\r\n    const [isDarkMode, setIsDarkMode] = useState(true);\r\n\r\n    const handleToggleMode = () => {\r\n        if (isDarkMode) {\r\n            document.documentElement.setAttribute('data-theme', 'light');\r\n        } else {\r\n            document.documentElement.setAttribute('data-theme', 'dark');\r\n        }\r\n\r\n        setIsDarkMode((prevValue) => !prevValue);\r\n    };\r\n\r\n    return (\r\n        <header className='header'>\r\n            <h1 className='header__title'>TODO</h1>\r\n            <div className='header__toggle-wrap'>\r\n                <img\r\n                    onClick={handleToggleMode}\r\n                    src={isDarkMode ? sunIcon : moonIcon}\r\n                    alt='sun icon - dark mode turn off'\r\n                    className='header__toggle'\r\n                />\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","export default __webpack_public_path__ + \"static/media/icon-check.a8fb15d0.svg\";","export default __webpack_public_path__ + \"static/media/icon-cross.6ee81d30.svg\";","import React, { useContext } from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { AppContext } from '../context/GlobalStore';\r\n\r\nimport finishIcon from '../images/icon-check.svg';\r\nimport deleteIcon from '../images/icon-cross.svg';\r\n\r\nconst Task = ({ id, name, isFinished, dateAdd, index }) => {\r\n    const { finishTask, removeTask } = useContext(AppContext);\r\n\r\n    const handleOnClickFinish = (id) => {\r\n        finishTask(id, isFinished);\r\n    };\r\n\r\n    const handleOnClickDelete = (id) => {\r\n        removeTask(id);\r\n    };\r\n\r\n    return (\r\n        <Draggable key={id} draggableId={name} index={index}>\r\n            {(provided) => (\r\n                <div\r\n                    ref={provided.innerRef}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    className={isFinished ? 'task finish' : 'task'}\r\n                >\r\n                    <div className='task__finish-wrap'>\r\n                        <button\r\n                            name='finish'\r\n                            className='task__btn-finish'\r\n                            onClick={() => handleOnClickFinish(id)}\r\n                        >\r\n                            <img\r\n                                src={finishIcon}\r\n                                alt='finish icon'\r\n                                className='task__finish-icon'\r\n                            />\r\n                        </button>\r\n                    </div>\r\n\r\n                    <div className='task__info-wrap'>\r\n                        <h2 className='task__name'>{name}</h2>\r\n                        <p className='task__date'>added: {dateAdd}</p>\r\n                    </div>\r\n\r\n                    <div className='task__delete-wrap'>\r\n                        <button\r\n                            name='delete'\r\n                            className='task__btn-delete'\r\n                            onClick={() => handleOnClickDelete(id)}\r\n                        >\r\n                            <img\r\n                                src={deleteIcon}\r\n                                alt='delete icon'\r\n                                className='task__delete-icon'\r\n                            />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </Draggable>\r\n    );\r\n};\r\n\r\nexport default Task;\r\n","import React, { useContext } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\nimport { AppContext } from '../context/GlobalStore';\r\nimport Task from './Task';\r\n\r\nconst ResultsList = ({ currentFilter, count }) => {\r\n    const { state, reorderState } = useContext(AppContext);\r\n\r\n    const handleOnDragEnd = (result) => {\r\n        reorderState(result);\r\n    };\r\n\r\n    let taskList = state;\r\n\r\n    if (currentFilter === 'active') {\r\n        taskList = taskList.filter((item) => !item.isFinished);\r\n    } else if (currentFilter === 'completed') {\r\n        taskList = taskList.filter((item) => item.isFinished);\r\n    }\r\n\r\n    const taskListMap = taskList.map((task, index) => (\r\n        <Task key={task.id} {...task} index={index} />\r\n    ));\r\n\r\n    useEffect(() => {\r\n        count(taskList.length);\r\n    });\r\n\r\n    return (\r\n        <DragDropContext onDragEnd={handleOnDragEnd}>\r\n            <Droppable droppableId='tasks'>\r\n                {(provided) => (\r\n                    <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.droppableProps}\r\n                        className='results__tasks'\r\n                    >\r\n                        {taskListMap}\r\n                        {provided.placeholder}\r\n                    </div>\r\n                )}\r\n            </Droppable>\r\n        </DragDropContext>\r\n    );\r\n};\r\n\r\nexport default ResultsList;\r\n","import React from 'react';\r\n\r\nconst ResultsOptions = ({ onClickFilters, onClickClear, count }) => {\r\n    return (\r\n        <div className='results__panel'>\r\n            <div className='results__count-wrap'>\r\n                <p className='results__count'>{count} items left</p>\r\n            </div>\r\n            <div className='results__options-wrap'>\r\n                <button\r\n                    onClick={onClickFilters}\r\n                    name='all'\r\n                    className='results__option active'\r\n                >\r\n                    All\r\n                </button>\r\n                <button\r\n                    onClick={onClickFilters}\r\n                    name='active'\r\n                    className='results__option'\r\n                >\r\n                    Active\r\n                </button>\r\n                <button\r\n                    onClick={onClickFilters}\r\n                    name='completed'\r\n                    className='results__option'\r\n                >\r\n                    Completed\r\n                </button>\r\n            </div>\r\n            <div className='results__clear-wrap'>\r\n                <button onClick={onClickClear} className='results__clear'>\r\n                    Clear Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResultsOptions;\r\n","import React, { useState, useContext } from 'react';\r\nimport { AppContext } from '../context/GlobalStore';\r\nimport ResultsList from './ResultsList';\r\nimport ResultsOptions from './ResultsOptions';\r\n\r\nconst ResultsPanel = () => {\r\n    const { clearFinishTask } = useContext(AppContext);\r\n    const [filter, setFilter] = useState('all');\r\n    const [count, setCount] = useState(0);\r\n\r\n    const handleOnClickOption = (e) => {\r\n        document\r\n            .querySelectorAll('.results__option')\r\n            .forEach((btn) => btn.classList.remove('active'));\r\n\r\n        e.target.classList.add('active');\r\n        const currentFilter = e.target.name;\r\n\r\n        setFilter(currentFilter);\r\n    };\r\n\r\n    const handleOnClickClear = () => {\r\n        clearFinishTask();\r\n\r\n        document\r\n            .querySelectorAll('.results__option')\r\n            .forEach((btn) => btn.classList.remove('active'));\r\n\r\n        document.querySelector('.results__option').classList.add('active');\r\n\r\n        setFilter('all');\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <section className='results'>\r\n                <ResultsList currentFilter={filter} count={setCount} />\r\n                <ResultsOptions\r\n                    onClickFilters={handleOnClickOption}\r\n                    onClickClear={handleOnClickClear}\r\n                    count={count}\r\n                />\r\n            </section>\r\n            <p className='results__info'>Drag and drop to reorder list</p>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ResultsPanel;\r\n","import React, { useEffect } from 'react';\nimport GlobalStore from '../context/GlobalStore';\nimport FormPanel from './FormPanel';\nimport Header from './Header';\nimport ResultsPanel from './ResultsPanel';\n\nconst App = () => {\n    useEffect(() => {\n        document.documentElement.setAttribute('data-theme', 'dark');\n    }, []);\n\n    return (\n        <GlobalStore>\n            <main className='content'>\n                <div className='content__container'>\n                    <Header />\n                    <FormPanel />\n                    <ResultsPanel />\n                </div>\n            </main>\n        </GlobalStore>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './scss/index.scss';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}